#
# Copyright (C) 2024-2025 Antonino Scordino
# Copyright (C) 2024-2025 Souhrud Reddy
#
# SPDX-License-Identifier: Apache-2.0
#

name: Crave Builder (self-hosted)
on:
  workflow_dispatch:
    # Various inputs to simplify usage of workflow.
    inputs:
      CRAVE_CMD:
        description: 'The commands for running crave'
        required: true
        default: 'curl -LSs https://raw.githubusercontent.com/rsuplaygrnd/krep_skrip/refs/heads/risingOS/build.sh | bash -'
      CLEAN_BUILD:
        description: 'Build with a clean workspace?'
        required: true
        default: 'no'
        type: choice
        options: 
        - 'yes'
        - 'no'

jobs:
  build:
    timeout-minutes: 1440
    name: Build using foss.crave.io
    runs-on: self-hosted
    concurrency:
      group: ${{ github.repository_owner }}
    steps:
      # Send Build 'start' notification
    - name: Telegram Notification
      continue-on-error: true
      run: |
        send_telegram_message() {
          local message="$1"
          curl -s -X POST \
          https://api.telegram.org/bot$botToken/sendMessage \
          -d chat_id=$chatId \
          -d text="$message" \
          -d parse_mode="Markdown"
        }
        
        send_telegram_message "Crave Project: ${{ github.event.inputs.BASE_PROJECT }}%0ACrave ProjectID: $PROJECTID %0ABuild for ${{ github.event.inputs.DEVICE_NAME }} has been queued %0ACheck Progress at: %0Ahttps://github.com/$(echo "${{ github.repository }}" | sed 's@_@\\_@g')/actions/runs/${{ github.run_id }}"
      env:
        chatId: ${{ secrets.TELEGRAM_TO }}
        botToken: ${{ secrets.TELEGRAM_TOKEN }}
        jobStatus: "Build Started"
        skipSuccess: false

    - name: Cleanup
      run: rm -rf * # This cleans github actions workspace

    - name: Check for a broken .bashrc
      continue-on-error: true
      run: |
        (
          set +e
          output=$(source ~/.bashrc 2>&1)
          status=$?
          echo "$output"
          if [[ $status -ne 0 ]]; then
            echo "You have a broken .bashrc, please contact a Crave.io Administrator"
            exit 1
          else
            echo ".bashrc looks okay, no explicit errors"
          fi

          # Double check to be sure
          if echo "$output" | grep -q "cannot execute"; then
            echo "You have a broken .bashrc, please contact a Crave.io Administrator"
            exit 1
          fi
        )

        # Create a project folder
    - name: Create Project Folders
      run: |
        echo "DCDEVSPACE status: ${DCDEVSPACE}"
        if [[ $DCDEVSPACE != *1* ]]; then

          #curl -s https://raw.githubusercontent.com/accupara/crave/master/get_crave.sh | bash -s -- 

          #mkdir -p ${HOME}/bin/
          #mv ${PWD}/crave ${HOME}/bin/ 
          #sudo ln -sf /home/${USER}/bin/crave /usr/bin/crave; sudo chmod +x /usr/bin/crave 

          echo "Symlinking devspace folder"
          mkdir -p devspace
          sudo mkdir -p /crave-devspaces
          sudo ln -sf ${pwd}/devspace /crave-devspaces
          sudo chmod 777 /crave-devspaces
        else
          echo "We are already running in devspace... Skipping Symlinks"
        fi
        if grep -q "$PROJECTFOLDER" <(crave clone list --json | jq -r '.clones[]."Cloned At"') || [[ "${DCDEVSPACE}" == "1" ]]; then
          crave clone destroy -y $PROJECTFOLDER || echo "Error removing $PROJECTFOLDER"
        else          
          echo "Skipping removal"
        fi

        if [[ $DCDEVSPACE == *1* ]]; then
          crave clone create --projectID $PROJECTID $PROJECTFOLDER || echo "Crave clone create failed!"
        else
          mkdir -p $PROJECTFOLDER
        fi
        
      # Check-out in order to access the repository's files.
    - name: Check-out to repository
      uses: actions/checkout@v4

      # Set-up a spearate directory for the device.
    - name: Set-up workspace environment
      run: |
        cd $PROJECTFOLDER
        mkdir ${{ github.event.inputs.DEVICE_NAME }}
        cd ${{ github.event.inputs.DEVICE_NAME }}
      continue-on-error: true
      
      # Generate 'git' credential in base of the workflow's author.
    - name: Set-up 'git' credential(s)
      run: |
        git config --global user.name "${{ github.actor }}"
        git config --global user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
      
      # Download and configure 'crave'.
    - name: Configure the 'crave' environment
      run: |
        echo "DCDEVSPACE status: ${DCDEVSPACE}"
        mkdir -p $PROJECTFOLDER/.repo/manifests
        if [[ $DCDEVSPACE == *1* ]]; then
        echo 'No need to set up crave, we are already running in devspace!'
        else
          curl -s https://raw.githubusercontent.com/accupara/crave/master/get_crave.sh | bash -s --
          mv ${PWD}/crave ${HOME}/bin/
          sudo ln -sf /home/${USER}/bin/crave /usr/bin/crave
          envsubst < ${PWD}/crave.conf.sample >> ${PWD}/crave.conf
          rm -rf ${PWD}/crave.conf.sample       
          cp crave.conf $PROJECTFOLDER 
        fi
        if [[ -z "${{ secrets.CUSTOM_YAML }}" ]]; then
          cp configs/crave/crave.yaml.aosp $PROJECTFOLDER/.repo/manifests/crave.yaml
          echo "No Custom Configuration Found, Using Template!"
        else
          touch $PROJECTFOLDER/.repo/manifests/crave.yaml || true
          echo "${{ secrets.CUSTOM_YAML }}" > $PROJECTFOLDER/.repo/manifests/crave.yaml
          echo "Custom Configuration Found!"
        fi
      env:
        CRAVE_USERNAME: ${{  secrets.CRAVE_USERNAME  }}
        CRAVE_TOKEN: ${{  secrets.CRAVE_TOKEN  }}

      # Initialize the previously choosen 'repo' project.
    - name: Set the 'crave' project
      run: |
        cd $PROJECTFOLDER
        if grep -q "$PROJECTFOLDER" <(crave clone list --json | jq -r '.clones[]."Cloned At"') || [[ "${DCDEVSPACE}" == "1" ]]; then
          echo "Using Crave Clone... skipping"
        fi

      # Create a 'crave' job for building.
    - name: Start compilation through 'crave'
      if: ${{ github.event.inputs.BUILD_DIFFERENT_ROM != 'skip' }}
      run: |
        cd $PROJECTFOLDER
        
        jq '.projects = []' ~/crave.conf > tmp && mv tmp ~/crave.conf
        if [ "${{ github.event.inputs.CLEAN_BUILD }}" == "yes" ]; then
           export CLEAN="--clean"
        fi

        if [[ -n "${{ secrets.PAID }}" ]]; then
           echo "Paid Build... Tokens will be consumed."
           export PAID="--platform aosp-silver"
        fi

        echo "Build is queued! Please wait for your build to start."
        echo "Check foss.crave.io Dashboard to see builds"
        echo "Running build's log will show up here!"

        crave ${{ secrets.CRAVE_FLAGS }} run --no-patch ${PAID} ${CLEAN} -- "${{ inputs.CRAVE_CMD }}"
      timeout-minutes: 1440

      # Send Build 'status' notification (Success)
    - name: Telegram Notification
      if:  ${{ success() }}
      continue-on-error: true
      run: |
        send_telegram_message() {
          local message="$1"
          curl -s -X POST \
          https://api.telegram.org/bot$botToken/sendMessage \
          -d chat_id=$chatId \
          -d text="$message" \
          -d parse_mode="Markdown"
        }

        send_telegram_message "Crave Project: ${{ github.event.inputs.BASE_PROJECT }}%0ACrave ProjectID: $PROJECTID %0ABuild for ${{ github.event.inputs.DEVICE_NAME }} has Succeeded! %0ACheck Progress at: %0Ahttps://github.com/$(echo "${{ github.repository }}" | sed 's@_@\\_@g')/actions/runs/${{ github.run_id }}%0ADownload at: https://github.com/$(echo "${{ github.repository }}" | sed 's@_@\\_@g')/releases/tag/${{ github.run_id }}"

      env:
        chatId: ${{ secrets.TELEGRAM_TO }}
        botToken: ${{ secrets.TELEGRAM_TOKEN }}
        jobStatus: ${{ job.status }}
        skipSuccess: false

      # Send Build 'status' notification (Fail/Cancel)
    - name: Telegram Notification
      if:  ${{ cancelled() || failure() }}
      continue-on-error: true
      run: |
        send_telegram_message() {
          local message="$1"
          curl -s -X POST \
          https://api.telegram.org/bot$botToken/sendMessage \
          -d chat_id=$chatId \
          -d text="$message" \
          -d parse_mode="Markdown"
        }

        if [ "$jobStatus" = "cancelled" ]; then
          jobMessage="has been Cancelled!"
        elif [ "$jobStatus" = "failure" ]; then
          jobMessage="has Failed!"
        fi

        send_telegram_message "Crave Project: ${{ github.event.inputs.BASE_PROJECT }}%0ACrave ProjectID: $PROJECTID %0ABuild for ${{ github.event.inputs.DEVICE_NAME }} $jobMessage %0ACheck Progress at: %0Ahttps://github.com/$(echo "${{ github.repository }}" | sed 's@_@\\_@g')/actions/runs/${{ github.run_id }}"
        # Todo: error.log link
      env:
        chatId: ${{ secrets.TELEGRAM_TO }}
        botToken: ${{ secrets.TELEGRAM_TOKEN }}
        jobStatus: ${{ job.status }}

      # Only reach this wheter the user killed the workflow.
    - name: Execute if the job is cancelled
      if: ${{ cancelled() }}
      run: |
        cd $PROJECTFOLDER
        crave stop --all

      # Upload '.zip's and '.img's directly from 'crave' ssh.
    - name: Upload build artifact(s)
      continue-on-error: true
      run: |
        cd $PROJECTFOLDER
        echo "${{ secrets.GITHUB_TOKEN }}" > token.txt
        crave push token.txt -d $(crave ssh -- pwd | grep -v Select | sed -s 's/\r//g')/
        crave ssh -- "export GH_UPLOAD_LIMIT="${{ secrets.GH_UPLOAD_LIMIT }}"; bash /opt/crave/github-actions/upload.sh '${{ github.run_id }}' '${{ github.event.inputs.DEVICE_NAME }}'  '${{ github.repository }}' '${{ github.event.inputs.PRODUCT_NAME }}-${{ github.run_id }}' '${{ secrets.EXTRA_FILES }}'"

      # Pull Errors and Display them
    - name: Display error.log
      if: ${{ failure() }}
      id: errorlog
      run: |
        cd $PROJECTFOLDER
        crave ssh -- sleep 1
        crave pull out/error.log
        echo "Displaying out/error.log"
        cat out/error.log

      # Upload to Telegram
    - name: Upload Using telegram-upload
      run: |
        cd $PROJECTFOLDER
        crave ssh -- "export TG_UPLOAD_LIMIT="${{ secrets.TG_UPLOAD_LIMIT }}"; bash /opt/crave/telegram/upload.sh '${{ github.event.inputs.DEVICE_NAME }}' '${{ secrets.EXTRA_FILES }}'"
      continue-on-error: true

     # Remove 'crave' clone
    - name: Destroy Crave Clone
      if: ${{ always() }}
      run: |
        if grep -q "$PROJECTFOLDER" <(crave clone list --json | jq -r '.clones[]."Cloned At"') || [[ "${DCDEVSPACE}" == "1" ]]; then
          crave clone destroy -y $PROJECTFOLDER || echo "Error removing $PROJECTFOLDER"
        else          
          echo "Skipping removal"
        fi
